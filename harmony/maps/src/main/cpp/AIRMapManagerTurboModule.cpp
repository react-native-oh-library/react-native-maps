
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */

#include "AIRMapManagerTurboModule.h"

using namespace rnoh;
using namespace facebook;

static jsi::Value __hostFunction_AIRMapManagerTurboModule_getCamera(
    jsi::Runtime &rt,
    react::TurboModule &turboModule,
    const jsi::Value *args, size_t count){
    return static_cast<ArkTSTurboModule &>(turboModule).call(rt, "getCamera", args, count);
}

static jsi::Value __hostFunction_AIRMapManagerTurboModule_setCamera(jsi::Runtime &rt, react::TurboModule &turboModule,
                                                           const jsi::Value *args, size_t count) {
    return static_cast<ArkTSTurboModule &>(turboModule).call(rt, "setCamera", args, count);
}

static jsi::Value __hostFunction_AIRMapManagerTurboModule_takeSnapshot(jsi::Runtime &rt, react::TurboModule &turboModule,
                                                                    const jsi::Value *args, size_t count) {
    return static_cast<ArkTSTurboModule &>(turboModule).callAsync(rt, "takeSnapshot", args, count);
}

static jsi::Value __hostFunction_AIRMapManagerTurboModule_animateCamera(jsi::Runtime &rt, react::TurboModule &turboModule,
                                                                    const jsi::Value *args, size_t count) {
    return static_cast<ArkTSTurboModule &>(turboModule).call(rt, "animateCamera", args, count);
}

static jsi::Value __hostFunction_AIRMapManagerTurboModule_animateToRegion(jsi::Runtime &rt,
                                                                        react::TurboModule &turboModule,
                                                                        const jsi::Value *args, size_t count) {
    return static_cast<ArkTSTurboModule &>(turboModule).call(rt, "animateToRegion", args, count);
}

static jsi::Value __hostFunction_AIRMapManagerTurboModule_fitToCoordinates(jsi::Runtime &rt,
                                                                          react::TurboModule &turboModule,
                                                                          const jsi::Value *args, size_t count) {
    return static_cast<ArkTSTurboModule &>(turboModule).call(rt, "fitToCoordinates", args, count);
}

static jsi::Value __hostFunction_AIRMapManagerTurboModule_setMapBoundaries(jsi::Runtime &rt,
                                                                           react::TurboModule &turboModule,
                                                                           const jsi::Value *args, size_t count) {
    return static_cast<ArkTSTurboModule &>(turboModule).call(rt, "setMapBoundaries", args, count);
}

static jsi::Value __hostFunction_AIRMapManagerTurboModule_getMapBoundaries(jsi::Runtime &rt,
                                                                           react::TurboModule &turboModule,
                                                                           const jsi::Value *args, size_t count) {
    return static_cast<ArkTSTurboModule &>(turboModule).call(rt, "getMapBoundaries", args, count);
}

static jsi::Value __hostFunction_AIRMapManagerTurboModule_getAddressFromCoordinates(jsi::Runtime &rt,
                                                                           react::TurboModule &turboModule,
                                                                           const jsi::Value *args, size_t count) {
    return static_cast<ArkTSTurboModule &>(turboModule).callAsync(rt, "getAddressFromCoordinates", args, count);
}

static jsi::Value __hostFunction_AIRMapManagerTurboModule_pointForCoordinate(jsi::Runtime &rt,
                                                                                    react::TurboModule &turboModule,
                                                                                    const jsi::Value *args,
                                                                                    size_t count) {
    return static_cast<ArkTSTurboModule &>(turboModule).call(rt, "pointForCoordinate", args, count);
}

static jsi::Value __hostFunction_AIRMapManagerTurboModule_coordinateForPoint(jsi::Runtime &rt,
                                                                             react::TurboModule &turboModule,
                                                                             const jsi::Value *args, size_t count) {
    return static_cast<ArkTSTurboModule &>(turboModule).call(rt, "coordinateForPoint", args, count);
}

static jsi::Value __hostFunction_AIRMapManagerTurboModule_setIndoorActiveLevelIndex(jsi::Runtime &rt,
                                                                             react::TurboModule &turboModule,
                                                                             const jsi::Value *args, size_t count) {
    return static_cast<ArkTSTurboModule &>(turboModule).call(rt, "setIndoorActiveLevelIndex", args, count);
}

static jsi::Value __hostFunction_AIRMapManagerTurboModule_fitToElements(jsi::Runtime &rt,
                                                                             react::TurboModule &turboModule,
                                                                             const jsi::Value *args, size_t count) {
    return static_cast<ArkTSTurboModule &>(turboModule).call(rt, "fitToElements", args, count);
}

static jsi::Value __hostFunction_AIRMapManagerTurboModule_fitToSuppliedMarkers(jsi::Runtime &rt,
                                                                             react::TurboModule &turboModule,
                                                                             const jsi::Value *args, size_t count) {
    return static_cast<ArkTSTurboModule &>(turboModule).call(rt, "fitToSuppliedMarkers", args, count);
}

static jsi::Value __hostFunction_AIRMapManagerTurboModule_getMarkersFrames(jsi::Runtime &rt,
                                                                             react::TurboModule &turboModule,
                                                                             const jsi::Value *args, size_t count) {
    return static_cast<ArkTSTurboModule &>(turboModule).callAsync(rt, "getMarkersFrames", args, count);
}

AIRMapManagerTurboModule::AIRMapManagerTurboModule(const ArkTSTurboModule::Context ctx, const std::string name)
    : ArkTSTurboModule(ctx, name) {
    methodMap_["getCamera"] = MethodMetadata{0, __hostFunction_AIRMapManagerTurboModule_getCamera};
    methodMap_["setCamera"] = MethodMetadata{1, __hostFunction_AIRMapManagerTurboModule_setCamera};
    methodMap_["animateCamera"] = MethodMetadata{2, __hostFunction_AIRMapManagerTurboModule_animateCamera};
    methodMap_["animateToRegion"] = MethodMetadata{2, __hostFunction_AIRMapManagerTurboModule_animateToRegion};
    methodMap_["fitToCoordinates"] = MethodMetadata{3, __hostFunction_AIRMapManagerTurboModule_fitToCoordinates};
    methodMap_["setMapBoundaries"] = MethodMetadata{2, __hostFunction_AIRMapManagerTurboModule_setMapBoundaries};
    methodMap_["getMapBoundaries"] = MethodMetadata{0, __hostFunction_AIRMapManagerTurboModule_getMapBoundaries};
    methodMap_["getAddressFromCoordinates"] = MethodMetadata{1, __hostFunction_AIRMapManagerTurboModule_getAddressFromCoordinates};
    
    methodMap_["takeSnapshot"] = MethodMetadata{1, __hostFunction_AIRMapManagerTurboModule_takeSnapshot};
    methodMap_["pointForCoordinate"] = MethodMetadata{1, __hostFunction_AIRMapManagerTurboModule_pointForCoordinate};
    methodMap_["coordinateForPoint"] = MethodMetadata{1, __hostFunction_AIRMapManagerTurboModule_coordinateForPoint};
    
    methodMap_["setIndoorActiveLevelIndex"] = MethodMetadata{1, __hostFunction_AIRMapManagerTurboModule_setIndoorActiveLevelIndex};
    methodMap_["fitToElements"] = MethodMetadata{1, __hostFunction_AIRMapManagerTurboModule_fitToElements};
    methodMap_["fitToSuppliedMarkers"] = MethodMetadata{2, __hostFunction_AIRMapManagerTurboModule_fitToSuppliedMarkers};
    methodMap_["getMarkersFrames"] = MethodMetadata{1, __hostFunction_AIRMapManagerTurboModule_getMarkersFrames};
}